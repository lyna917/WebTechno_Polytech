// –ó–∞–º–µ–Ω–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ servicesData –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞:
let servicesData = [];

// –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É selectedServices –Ω–∞ –º–∞—Å—Å–∏–≤
let selectedServices = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
function loadCartFromStorage() {
    try {
        const savedCart = localStorage.getItem('shoppingCart');
        if (savedCart) {
            const parsedCart = JSON.parse(savedCart);
            selectedServices = parsedCart;
            console.log('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', selectedServices);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage:', error);
        selectedServices = [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
function saveCartToStorage() {
    try {
        localStorage.setItem('shoppingCart', JSON.stringify(selectedServices));
        console.log('–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage:', selectedServices);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
function clearCartFromStorage() {
    try {
        localStorage.removeItem('shoppingCart');
        console.log('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –∏–∑ localStorage');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage:', error);
    }
}

// –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å—Ç—ã–π JSON
async function loadServicesData() {
    try {
        const response = await fetch('https://api-3imo.onrender.com/');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        servicesData = await response.json();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        servicesData.forEach(section => {
            if (section.services) {
                section.services.forEach(service => {
                    if (service && !service.image) {
                        service.image = getServiceEmoji(service);
                    }
                });
            }
        });
        
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', servicesData);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥:', error);
        servicesData = getFallbackData();
        return false;
    }
}

// Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
function getFallbackData() {
    return [
        {
            section: "delivery",
            title: "–î–æ—Å—Ç–∞–≤–∫–∞",
            services: [
                {
                    id: "delivery",
                    name: "–£–ü–† –¥–æ—Å—Ç–∞–≤–∫–∞",
                    description: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∫–æ–π",
                    price: "1000 ‚ÇΩ",
                    image: "üöö"
                }
            ]
        },
        {
            section: "accessories",
            title: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
            services: [
                {
                    id: "labels",
                    name: "–≠—Ç–∏–∫–µ—Ç–∫–∏",
                    description: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
                    price: "150 ‚ÇΩ",
                    image: "üè∑Ô∏è"
                },
                {
                    id: "clock",
                    name: "–ß–∞—Å—ã —Å –ø—Ä–∏–Ω—Ç–æ–º",
                    description: "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ —á–∞—Å—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º",
                    price: "900 ‚ÇΩ",
                    image: "‚è∞"
                }
            ]
        },
        {
            section: "clothing",
            title: "–ü–µ—á–∞—Ç—å –Ω–∞ –æ–¥–µ–∂–¥–µ",
            services: [
                {
                    id: "tshirt_print",
                    name: "–ü–µ—á–∞—Ç—å –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞—Ö",
                    description: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤",
                    price: "–æ—Ç 500 ‚ÇΩ",
                    image: "üëï"
                }
            ]
        }
    ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Å–ª—É–≥–∏
function getServiceEmoji(service) {
    const emojiMap = {
        'delivery': 'üöö',
        'labels': 'üè∑Ô∏è',
        'clock': '‚è∞',
        'tshirt_print': 'üëï',
        'mug_print': '‚òï',
        'business_cards': 'üìá',
        'flyers': 'üìÑ',
        'pen_print': '‚úèÔ∏è',
        'branded_merch': 'üéÅ',
        'limited_edition': '‚≠ê',
        'premium_packaging': 'üéÄ'
    };
    
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ ID —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (service.id && emojiMap[service.id]) {
        return emojiMap[service.id];
    }
    
    // –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const name = service.name ? service.name.toLowerCase() : '';
    if (name.includes('–¥–æ—Å—Ç–∞–≤–∫')) return 'üöö';
    if (name.includes('—ç—Ç–∏–∫–µ—Ç–∫') || name.includes('–±–∏—Ä–∫')) return 'üè∑Ô∏è';
    if (name.includes('—á–∞—Å')) return '‚è∞';
    if (name.includes('—Ñ—É—Ç–±–æ–ª–∫') || name.includes('–æ–¥–µ–∂–¥')) return 'üëï';
    if (name.includes('–∫—Ä—É–∂–∫') || name.includes('–º—É–≥')) return '‚òï';
    if (name.includes('–≤–∏–∑–∏—Ç–∫')) return 'üìá';
    if (name.includes('–ª–∏—Å—Ç–æ–≤–∫') || name.includes('—Ñ–ª–∞–µ—Ä')) return 'üìÑ';
    if (name.includes('—Ä—É—á–∫')) return '‚úèÔ∏è';
    if (name.includes('—Å—É–≤–µ–Ω–∏—Ä') || name.includes('–º–µ—Ä—á')) return 'üéÅ';
    if (name.includes('–ø—Ä–µ–º–∏—É–º') || name.includes('—ç–∫—Å–∫–ª—é–∑–∏–≤')) return '‚≠ê';
    if (name.includes('—É–ø–∞–∫–æ–≤–∫')) return 'üéÄ';
    
    // –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryEmoji = {
        'clothing': 'üëï',
        'accessories': 'üëú',
        'headwear': 'üß¢',
        'premium': '‚≠ê',
        'polygraphy': 'üìÑ',
        'souvenirs': 'üéÅ',
        'delivery': 'üöö'
    };
    
    return categoryEmoji[service.section] || 'üì¶';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
    const servicesContainer = document.getElementById('services-container');
    servicesContainer.innerHTML = `
        <div class="loading" style="text-align: center; padding: 50px;">
            <div style="font-size: 18px; color: rgb(0,0,55);">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</div>
            <div style="margin-top: 20px;">‚è≥</div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function showErrorMessage() {
    const servicesContainer = document.getElementById('services-container');
    servicesContainer.innerHTML = `
        <div class="error-message" style="text-align: center; padding: 50px;">
            <div style="font-size: 24px; color: #e74c3c;">‚ö†Ô∏è</div>
            <h3 style="color: #c0392b;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
            <button onclick="location.reload()" style="padding: 10px 20px; background: rgb(0,0,55); color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 15px;">
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
        </div>
    `;
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ DOMContentLoaded
document.addEventListener('DOMContentLoaded', async function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
    loadCartFromStorage();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator();
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const success = await loadServicesData();
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', success, '–î–∞–Ω–Ω—ã–µ:', servicesData);
        
        if (success && servicesData && servicesData.length > 0) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —É—Å–ª—É–≥–∏
            createFilters();
            renderFilteredServices();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            updateOrderDisplay();
            
            console.log('–£—Å–ª—É–≥–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã, –∫–æ—Ä–∑–∏–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            showErrorMessage();
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showErrorMessage();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä–æ–≤
    document.querySelectorAll('.combo-add-btn').forEach(button => {
        button.addEventListener('click', function() {
            const comboType = this.dataset.combo;
            addComboToOrder(comboType);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    const orderForm = document.getElementById('customer-form');
    if (orderForm) {
        orderForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (!servicesData || servicesData.length === 0) {
                showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.', 'error');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            if (selectedServices.length === 0) {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.', 'error');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            validateComboSelectionWithConfirmation().then(shouldProceed => {
                if (shouldProceed) {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
                    submitOrderForm();
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                }
            });
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationOk = document.getElementById('notification-ok');
    if (notificationOk) {
        notificationOk.addEventListener('click', function() {
            document.getElementById('notification').classList.add('hidden');
        });
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
let currentFilters = {
    category: 'all',
    price: 'all',
    sort: 'name'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–π —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceString) {
    if (!priceString) return 0;
    const priceMatch = priceString.match(/(\d+[\s\d]*)/);
    return priceMatch ? parseInt(priceMatch[0].replace(/\s/g, '')) : 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const categoryFilter = document.getElementById('categoryFilter')?.value || 'all';
    const priceFilter = document.getElementById('priceFilter')?.value || 'all';
    const sortFilter = document.getElementById('sortFilter')?.value || 'name';
    
    currentFilters = {
        category: categoryFilter,
        price: priceFilter,
        sort: sortFilter
    };
    
    renderFilteredServices();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ª—É–≥
function filterServices() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ servicesData –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (!servicesData || servicesData.length === 0) {
        console.warn('servicesData –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return [];
    }
    
    let filteredData = JSON.parse(JSON.stringify(servicesData)); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (currentFilters.category !== 'all') {
        filteredData = filteredData.filter(section => 
            section && section.section === currentFilters.category
        );
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
    filteredData.forEach(section => {
        if (!section.services) {
            section.services = [];
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å–ª—É–≥ –ø–æ —Ü–µ–Ω–µ
        if (currentFilters.price !== 'all') {
            section.services = section.services.filter(service => {
                if (!service) return false;
                const price = extractPrice(service.price);
                
                switch (currentFilters.price) {
                    case '0-50000':
                        return price <= 50000;
                    case '50000-100000':
                        return price >= 50000 && price <= 100000;
                    case '100000-150000':
                        return price >= 100000 && price <= 150000;
                    case '150000-200000':
                        return price >= 150000 && price <= 200000;
                    case '200000+':
                        return price >= 200000;
                    default:
                        return true;
                }
            });
        }
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å–ª—É–≥
        section.services.sort((a, b) => {
            if (!a || !b) return 0;
            const priceA = extractPrice(a.price);
            const priceB = extractPrice(b.price);
            
            switch (currentFilters.sort) {
                case 'name':
                    return (a.name || '').localeCompare(b.name || '', 'ru');
                case 'name-desc':
                    return (b.name || '').localeCompare(a.name || '', 'ru');
                case 'price':
                    return priceA - priceB;
                case 'price-desc':
                    return priceB - priceA;
                default:
                    return (a.name || '').localeCompare(b.name || '', 'ru');
            }
        });
    });
    
    return filteredData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥–∏
function createServiceCard(service) {
    if (!service) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:', service);
        return '';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Å–ª—É–≥–∏
    const serviceEmoji = getServiceEmoji(service);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —É—Å–ª—É–≥–∞
    const isSelected = selectedServices.some(s => s.id === service.id);
    const selectedClass = isSelected ? 'selected' : '';
    
    return `
        <div class="service-card ${selectedClass}" data-service="${service.id}" data-category="${service.section || ''}">
            <div class="service-image">
                ${serviceEmoji}
            </div>
            <div class="service-info">
                <h3>${service.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <p>${service.description || ''}</p>
                <p class="price">${service.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                <button class="add-to-order" onclick="addToOrder('${service.id}')">${isSelected ? '–î–æ–±–∞–≤–ª–µ–Ω–æ' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å —É—Å–ª—É–≥–∞–º–∏
function createServiceSection(sectionData) {
    if (!sectionData || !sectionData.services || sectionData.services.length === 0) {
        return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –±–µ–∑ —É—Å–ª—É–≥
    }
    
    const servicesHTML = sectionData.services.map(service => 
        createServiceCard(service)
    ).join('');
    
    return `
        <section id="${sectionData.section}" class="service-section">
            <h2>${sectionData.title}</h2>
            <div class="services-grid">
                ${servicesHTML}
            </div>
        </section>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showNoResultsMessage() {
    return `
        <div class="no-results">
            <h3>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
            <button onclick="resetFilters()" class="reset-btn" style="margin-top: 15px;">–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
function renderFilteredServices() {
    const servicesContainer = document.getElementById('services-container');
    const filteredData = filterServices();
    
    let hasResults = false;
    const allSectionsHTML = filteredData.map(sectionData => {
        if (sectionData && sectionData.services && sectionData.services.length > 0) {
            hasResults = true;
            return createServiceSection(sectionData);
        }
        return '';
    }).join('');
    
    if (!hasResults) {
        servicesContainer.innerHTML = showNoResultsMessage();
    } else {
        servicesContainer.innerHTML = allSectionsHTML;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
    const categoryFilter = document.getElementById('categoryFilter');
    const priceFilter = document.getElementById('priceFilter');
    const sortFilter = document.getElementById('sortFilter');
    
    if (categoryFilter) categoryFilter.value = 'all';
    if (priceFilter) priceFilter.value = 'all';
    if (sortFilter) sortFilter.value = 'name';
    
    currentFilters = {
        category: 'all',
        price: 'all',
        sort: 'name'
    };
    
    renderFilteredServices();
}

function addComboToOrder(comboType) {
    const comboDefinitions = {
        'basic': ['tshirt_print', 'mug_print'],
        'business': ['business_cards', 'flyers', 'pen_print'],
        'premium': ['branded_merch', 'limited_edition', 'premium_packaging']
    };
    
    const selectedCombo = comboDefinitions[comboType];
    
    if (selectedCombo) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —É—Å–ª—É–≥–∏ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–º–±–æ
        const currentKeywords = selectedServices.map(service => service.id);
        
        const alreadyAdded = selectedCombo.some(keyword => currentKeywords.includes(keyword));
        
        if (alreadyAdded) {
            showNotification('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—á–∏—Å—Ç–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–æ–º–±–æ.', 'warning');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–æ–º–±–æ
        selectedCombo.forEach(serviceKeyword => {
            addToOrder(serviceKeyword);
        });
        
        showNotification(`–ö–æ–º–±–æ-–Ω–∞–±–æ—Ä "${getComboName(comboType)}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!`, 'success');
    }
}

function getComboName(comboType) {
    const comboNames = {
        'basic': '–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä',
        'business': '–ë–∏–∑–Ω–µ—Å –Ω–∞–±–æ—Ä', 
        'premium': '–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä'
    };
    return comboNames[comboType] || comboType;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
function validateComboSelectionWithConfirmation() {
    return new Promise((resolve) => {
        const validationResult = validateComboSelection();
        
        if (validationResult.isValid) {
            // –ï—Å–ª–∏ –∫–æ–º–±–æ –≤–∞–ª–∏–¥–Ω–æ, —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            resolve(true);
            return;
        }
        
        // –ï—Å–ª–∏ –∫–æ–º–±–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        showComboConfirmationDialog(validationResult.message, validationResult.missingItems)
            .then(userChoice => {
                resolve(userChoice === 'continue');
            });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showComboConfirmationDialog(warningMessage, missingItems) {
    return new Promise((resolve) => {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'combo-confirmation-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            font-family: Arial, sans-serif;
        `;
        
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: white;
            padding: 30px;
            border-radius: 10px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            text-align: center;
        `;
        
        let messageHTML = `
            <div style="font-size: 48px; margin-bottom: 15px;">‚ö†Ô∏è</div>
            <h3 style="color: #e67e22; margin-bottom: 15px;">–í–Ω–∏–º–∞–Ω–∏–µ!</h3>
            <p style="margin-bottom: 20px; line-height: 1.5;">${warningMessage}</p>
        `;
        
        if (missingItems && missingItems.length > 0) {
            messageHTML += `
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 15px 0;">
                    <strong>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏:</strong>
                    <ul style="text-align: left; margin: 10px 0; padding-left: 20px;">
                        ${missingItems.map(item => `<li>${item}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        messageHTML += `
            <p style="margin: 20px 0; color: #666;">
                –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.
            </p>
            <div style="display: flex; gap: 15px; justify-content: center; margin-top: 25px;">
                <button id="combo-go-back" style="
                    padding: 12px 25px;
                    background: #95a5a6;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    flex: 1;
                ">–í–µ—Ä–Ω—É—Ç—å—Å—è</button>
                <button id="combo-continue" style="
                    padding: 12px 25px;
                    background: #e74c3c;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    flex: 1;
                ">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </div>
        `;
        
        modalContent.innerHTML = messageHTML;
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.getElementById('combo-go-back').addEventListener('click', function() {
            document.body.removeChild(modal);
            resolve('go-back');
        });
        
        document.getElementById('combo-continue').addEventListener('click', function() {
            document.body.removeChild(modal);
            resolve('continue');
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                document.body.removeChild(modal);
                resolve('go-back');
            }
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ
function validateComboSelection() {
    if (selectedServices.length === 0) {
        return {
            isValid: false,
            message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.',
            missingItems: []
        };
    }
    
    const comboDefinitions = {
        'basic': ['tshirt_print', 'mug_print'],
        'business': ['business_cards', 'flyers', 'pen_print'],
        'premium': ['branded_merch', 'limited_edition', 'premium_packaging']
    };
    
    const selectedKeywords = selectedServices.map(service => service.id);
    
    let isValidCombo = false;
    let matchedCombo = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –æ–¥–Ω–æ–º—É –∏–∑ –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä–æ–≤
    for (const [comboName, requiredKeywords] of Object.entries(comboDefinitions)) {
        const hasAllRequired = requiredKeywords.every(keyword => selectedKeywords.includes(keyword));
        const hasOnlyRequired = selectedKeywords.every(keyword => requiredKeywords.includes(keyword));
        
        if (hasAllRequired && hasOnlyRequired) {
            isValidCombo = true;
            matchedCombo = comboName;
            break;
        }
    }
    
    if (isValidCombo) {
        return {
            isValid: true,
            message: `–ó–∞–∫–∞–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä—É "${getComboName(matchedCombo)}"`,
            missingItems: []
        };
    }
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∫–æ–º–±–æ, –∏—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π
    let bestMatch = null;
    let bestMatchMissing = [];
    let bestMatchExtra = [];
    
    for (const [comboName, requiredKeywords] of Object.entries(comboDefinitions)) {
        const missing = requiredKeywords.filter(keyword => !selectedKeywords.includes(keyword));
        const extra = selectedKeywords.filter(keyword => !requiredKeywords.includes(keyword));
        
        // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–º–±–æ (—Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É—Å–ª—É–≥)
        if (bestMatch === null || missing.length < bestMatchMissing.length) {
            bestMatch = comboName;
            bestMatchMissing = missing;
            bestMatchExtra = extra;
        }
    }
    
    if (bestMatchMissing.length > 0 || bestMatchExtra.length > 0) {
        const missingItems = bestMatchMissing.map(keyword => {
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ servicesData –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            let serviceName = keyword;
            if (servicesData && servicesData.length > 0) {
                const service = servicesData.flatMap(section => section.services || []).find(s => s && s.id === keyword);
                if (service && service.name) {
                    serviceName = service.name;
                }
            }
            return serviceName;
        });
        
        const extraItems = bestMatchExtra.map(keyword => {
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å–ª—É–≥–∏
            let serviceName = keyword;
            if (servicesData && servicesData.length > 0) {
                const service = servicesData.flatMap(section => section.services || []).find(s => s && s.id === keyword);
                if (service && service.name) {
                    serviceName = service.name;
                }
            }
            return serviceName;
        });
        
        let message = `–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –æ–±—Ä–∞–∑—É—é—Ç –ø–æ–ª–Ω—ã–π –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä. `;
        
        if (bestMatchMissing.length > 0) {
            message += `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ "${getComboName(bestMatch)}" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å: ${missingItems.join(', ')}. `;
        }
        
        if (bestMatchExtra.length > 0) {
            message += `–í –∑–∞–∫–∞–∑–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏—à–Ω–∏–µ —É—Å–ª—É–≥–∏: ${extraItems.join(', ')}.`;
        }
        
        return {
            isValid: false,
            message: message.trim(),
            missingItems: missingItems
        };
    }
    
    return {
        isValid: false,
        message: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –æ–±—Ä–∞–∑—É—é—Ç –ø–æ–ª–Ω—ã–π –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —É—Å–ª—É–≥–∏.',
        missingItems: []
    };
}

function showNotification(message, type = 'error') {
    const notification = document.getElementById('notification');
    const notificationMessage = document.getElementById('notification-message');
    const notificationIcon = document.querySelector('.notification-icon');
    const notificationTitle = document.querySelector('.notification-title');
    
    if (!notification) return;
    
    notification.className = `notification ${type}`;
    
    switch(type) {
        case 'success':
            notificationIcon.textContent = '‚úÖ';
            notificationTitle.textContent = '–£—Å–ø–µ—à–Ω–æ!';
            break;
        case 'warning':
            notificationIcon.textContent = '‚ö†Ô∏è';
            notificationTitle.textContent = '–í–Ω–∏–º–∞–Ω–∏–µ';
            break;
        case 'error':
            notificationIcon.textContent = '‚ùå';
            notificationTitle.textContent = '–û—à–∏–±–∫–∞';
            break;
        default:
            notificationIcon.textContent = '‚ÑπÔ∏è';
            notificationTitle.textContent = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
    }
    
    notificationMessage.textContent = message;
    notification.classList.remove('hidden');
}

function createFilters() {
    const categories = {
        'all': '–í—Å–µ —É—Å–ª—É–≥–∏',
        'clothing': '–û–¥–µ–∂–¥–∞',
        'accessories': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        'headwear': '–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã',
        'premium': '–ü—Ä–µ–º–∏—É–º',
        'polygraphy': '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è',
        'souvenirs': '–°—É–≤–µ–Ω–∏—Ä—ã',
        'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞'
    };
    
    const servicesSection = document.getElementById('services');
    const mainFilterContainer = document.createElement('div');
    mainFilterContainer.className = 'main-filters-container';
    
    const mainFilterTitle = document.createElement('h3');
    mainFilterTitle.textContent = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:';
    mainFilterContainer.appendChild(mainFilterTitle);
    
    const mainFilters = document.createElement('div');
    mainFilters.className = 'main-filters';
    
    const allCategoriesButton = document.createElement('button');
    allCategoriesButton.className = 'main-filter-btn active';
    allCategoriesButton.dataset.category = 'all';
    allCategoriesButton.textContent = '–í—Å–µ —É—Å–ª—É–≥–∏';
    allCategoriesButton.addEventListener('click', filterByCategory);
    mainFilters.appendChild(allCategoriesButton);
    
    for (const category in categories) {
        if (category !== 'all') {
            const categoryButton = document.createElement('button');
            categoryButton.className = 'main-filter-btn';
            categoryButton.dataset.category = category;
            categoryButton.textContent = categories[category];
            categoryButton.addEventListener('click', filterByCategory);
            mainFilters.appendChild(categoryButton);
        }
    }
    
    mainFilterContainer.appendChild(mainFilters);
    servicesSection.insertBefore(mainFilterContainer, document.getElementById('services-container'));
    
    const subFiltersContainer = document.createElement('div');
    subFiltersContainer.className = 'subfilters-container';
    subFiltersContainer.id = 'subfilters-container';
    subFiltersContainer.style.display = 'none';
    servicesSection.insertBefore(subFiltersContainer, document.getElementById('services-container'));
}

function filterByCategory() {
    const category = this.dataset.category;
    
    document.querySelectorAll('.main-filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    this.classList.add('active');
    
    document.querySelectorAll('.service-card').forEach(card => {
        if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
    
    const subFiltersContainer = document.getElementById('subfilters-container');
    if (category !== 'all') {
        createSubFilters(category);
        subFiltersContainer.style.display = 'block';
    } else {
        subFiltersContainer.style.display = 'none';
    }
}

function createSubFilters(category) {
    const kindFilters = {
        'clothing': ['all', 'basic', 'premium'],
        'accessories': ['all', 'basic', 'premium'],
        'headwear': ['all', 'basic', 'premium'],
        'premium': ['all', 'exclusive', 'custom', 'luxury'],
        'polygraphy': ['all', 'paper', 'large_format', 'vinyl'],
        'souvenirs': ['all', 'metal', 'magnetic', 'cork', 'cardboard', 'plastic', 'leather'],
        'delivery': ['all', 'standard', 'express']
    };
    
    const kindNames = {
        'all': '–í—Å–µ',
        'basic': '–ë–∞–∑–æ–≤—ã–π',
        'premium': '–ü—Ä–µ–º–∏—É–º',
        'exclusive': '–≠–∫—Å–∫–ª—é–∑–∏–≤',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π',
        'luxury': '–õ—é–∫—Å',
        'paper': '–ë—É–º–∞–≥–∞',
        'large_format': '–ö—Ä—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
        'vinyl': '–í–∏–Ω–∏–ª',
        'metal': '–ú–µ—Ç–∞–ª–ª',
        'magnetic': '–ú–∞–≥–Ω–∏—Ç–Ω—ã–π',
        'cork': '–ü—Ä–æ–±–∫–∞',
        'cardboard': '–ö–∞—Ä—Ç–æ–Ω',
        'plastic': '–ü–ª–∞—Å—Ç–∏–∫',
        'leather': '–ö–æ–∂–∞',
        'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
        'express': '–≠–∫—Å–ø—Ä–µ—Å—Å'
    };
    
    const subFiltersContainer = document.getElementById('subfilters-container');
    subFiltersContainer.innerHTML = '';
    
    const subFilterTitle = document.createElement('h4');
    subFilterTitle.textContent = '–¢–∏–ø:';
    subFiltersContainer.appendChild(subFilterTitle);
    
    const subFilters = document.createElement('div');
    subFilters.className = 'sub-filters';
    
    if (kindFilters[category]) {
        kindFilters[category].forEach(kind => {
            const kindButton = document.createElement('button');
            kindButton.className = 'sub-filter-btn';
            kindButton.dataset.kind = kind;
            kindButton.dataset.category = category;
            kindButton.textContent = kindNames[kind] || kind;
            kindButton.addEventListener('click', filterByKind);
            subFilters.appendChild(kindButton);
        });
    }
    
    subFiltersContainer.appendChild(subFilters);
    subFilters.querySelector('.sub-filter-btn[data-kind="all"]')?.classList.add('active');
}

function filterByKind() {
    const kind = this.dataset.kind;
    const category = this.dataset.category;
    
    document.querySelectorAll(`.sub-filter-btn[data-category="${category}"]`).forEach(btn => {
        btn.classList.remove('active');
    });
    
    this.classList.add('active');
    
    document.querySelectorAll(`.service-card[data-category="${category}"]`).forEach(card => {
        if (kind === 'all' || card.dataset.kind === kind) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

function addToOrder(serviceId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ servicesData –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (!servicesData || servicesData.length === 0) {
        console.error('–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        showNotification('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'error');
        return;
    }
    
    const service = servicesData.flatMap(section => section.services || []).find(s => s && s.id === serviceId);
    
    if (!service) {
        console.error('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', serviceId);
        showNotification('–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —É—Å–ª—É–≥–∞
    const alreadyAdded = selectedServices.some(s => s.id === serviceId);
    if (alreadyAdded) {
        showNotification('–≠—Ç–∞ —É—Å–ª—É–≥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–∫–∞–∑.', 'warning');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –º–∞—Å—Å–∏–≤
    selectedServices.push(service);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
    saveCartToStorage();
    
    // –í—ã–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    const selectedCard = document.querySelector(`.service-card[data-service="${serviceId}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const button = selectedCard.querySelector('.add-to-order');
        if (button) {
            button.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–æ';
        }
    }
    
    updateOrderDisplay();
}

function updateOrderDisplay() {
    const orderContainer = document.getElementById('order-items');
    const orderTotal = document.getElementById('order-total');
    let total = 0;
    
    if (selectedServices.length === 0) {
        orderContainer.innerHTML = '<p>–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</p>';
        if (orderTotal) orderTotal.style.display = 'none';
        return;
    }
    
    let orderHTML = '';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const servicesByCategory = {};
    selectedServices.forEach(service => {
        if (!servicesByCategory[service.section]) {
            servicesByCategory[service.section] = [];
        }
        servicesByCategory[service.section].push(service);
    });
    
    for (const category in servicesByCategory) {
        orderHTML += `
            <div class="order-category">
        `;
        
        servicesByCategory[category].forEach(service => {
            orderHTML += `
                <div class="order-item">
                    <span>${service.name} ${service.price}</span>
                    <button class="remove-item" data-service="${service.id}">‚úï</button>
                </div>
            `;
            total += extractPrice(service.price);
        });
        
        orderHTML += `</div>`;
    }
    
    orderContainer.innerHTML = orderHTML;
    
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
            const serviceId = this.dataset.service;
            removeFromOrder(serviceId);
        });
    });
    
    const totalPriceElement = document.getElementById('total-price');
    if (totalPriceElement) {
        totalPriceElement.textContent = `${total}‚ÇΩ`;
    }
    if (orderTotal) {
        orderTotal.style.display = 'block';
    }
}

function getCategoryName(category) {
    const categoryNames = {
        clothing: '–û–¥–µ–∂–¥–∞',
        accessories: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        headwear: '–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã',
        premium: '–ü—Ä–µ–º–∏—É–º',
        polygraphy: '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è',
        souvenirs: '–°—É–≤–µ–Ω–∏—Ä—ã',
        delivery: '–î–æ—Å—Ç–∞–≤–∫–∞'
    };
    
    return categoryNames[category] || category;
}

function removeFromOrder(serviceId) {
    // –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
    selectedServices = selectedServices.filter(service => service.id !== serviceId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
    saveCartToStorage();
    
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏
    const selectedCard = document.querySelector(`.service-card[data-service="${serviceId}"]`);
    if (selectedCard) {
        selectedCard.classList.remove('selected');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const button = selectedCard.querySelector('.add-to-order');
        if (button) {
            button.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
        }
    }
    
    updateOrderDisplay();
}

function resetOrder() {
    selectedServices = [];
    
    // –û—á–∏—â–∞–µ–º localStorage
    clearCartFromStorage();
    
    document.querySelectorAll('.service-card').forEach(card => {
        card.classList.remove('selected');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const button = card.querySelector('.add-to-order');
        if (button) {
            button.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
        }
    });
    
    updateOrderDisplay();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
function submitOrderForm() {
    const form = document.getElementById('customer-form');
    const formMethod = form.method.toUpperCase();
    const formAction = form.action;
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = new FormData(form);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
    selectedServices.forEach((service, index) => {
        formData.append(`service_${index}_id`, service.id);
        formData.append(`service_${index}_name`, service.name);
        formData.append(`service_${index}_price`, service.price);
        if (service.description) {
            formData.append(`service_${index}_description`, service.description);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    formData.append('total_services', selectedServices.length);
    formData.append('total_price', calculateTotalPrice());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const submitButton = document.querySelector('.submit-order');
    const originalText = submitButton.textContent;
    submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitButton.disabled = true;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON
    submitFormDataJSON(formData, formMethod, formAction)
        .then(success => {
            if (success) {
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                resetOrder();
            }
        })
        .finally(() => {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON
function submitFormDataJSON(formData, method, action) {
    return new Promise((resolve) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FormData –≤ –æ–±—ä–µ–∫—Ç
        const formObject = {};
        formData.forEach((value, key) => {
            // –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
            if (formObject[key]) {
                if (!Array.isArray(formObject[key])) {
                    formObject[key] = [formObject[key]];
                }
                formObject[key].push(value);
            } else {
                formObject[key] = value;
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        formObject.services = selectedServices.map(service => ({
            id: service.id,
            name: service.name,
            price: service.price,
            description: service.description || ''
        }));
        
        // JSON –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        const methodsWithBody = ['POST', 'PUT', 'PATCH'];
        
        if (!methodsWithBody.includes(method)) {
            showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–ª—è JSON –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
            resolve(false);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON
        fetch(action, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formObject)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
            }
            return response.json();
        })
        .then(data => {
            showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            resolve(true);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
            showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞', 'error');
            resolve(false);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculateTotalPrice() {
    const totalPriceElement = document.getElementById('total-price');
    return totalPriceElement ? totalPriceElement.textContent : '0';
}